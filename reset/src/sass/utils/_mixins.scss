// font-face
@mixin font-face($font-name, $path, $style: normal, $weight: normal) {
    @font-face {
      font-family: $font-name;
      font-style: $style;
      font-weight: $weight;
      src: url($path+".eot"); // IE9 compat
      src: url($path+".eot?#iefix") format("embedded-opentype"), // IE8 and below
           url($path+".woff2") format("woff2"), // except IE
           url($path+".woff") format("woff"), // standards
           url($path+".otf") format("otf"); // Android, iOS
        //    url($path+".ttf") format("truetype"), 
        //    url($path+".svg##{$font-name}") format("svg");
    }
}

// font-size
@mixin font-size($font-size, $line-height: normal) {
    font-size: $font-size * 1px;

    @if $line-height==normal {
      line-height: normal;
    } @else {
      line-height: $line-height / $font-size;
    }
}

// background Images
@mixin background($path, $repeat, $cover, $pos: ()) {
    background-image: url($path);
    background-repeat: $repeat;
    background-size: $cover;
    background-position: $pos;
}



// vendor prefix
/// @param {String} $property - 프리픽스가 붙지 않은 CSS 속성
/// @param {*} $value - 가공되지 않은 CSS 값
$prefixes: ('webkit', 'moz', 'ms', 'o'); // 프리픽스 리스트 변수
@mixin prefix($property, $value) {
    @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: $value;
    }

    #{$property}: $value;
}

// transform
@mixin transform($property: none) {
  @include prefix(transform, $property);
}
@mixin transform-origin($x, $y) {
  @include prefix(transform-origin, ($x, $y));
}
@mixin transform-style($style: flat) {
  @include prefix(transform-style, $style);
}


// transition
@mixin transition($transition...) {
  @include prefix(transition, $transition);
}
@mixin transition-property($property...) {
  // 속성
  @include prefix(transition-property, $property);
}
@mixin transition-duration($duration...) {
  // 실행시간, default: 0s;
  @include prefix(transition-duration, $duration);
}
@mixin transition-timing-function($timing...) {
  // 실행속도
  @include prefix(transition-timing-function, $timing);
}
@mixin transition-delay($delay...) {
  // 실행지연
  @include prefix(transition-delay, $delay);
}

@mixin button {
  @include prefix(border, 0);
  @include prefix(border-radius, 0);
  @include prefix(appearance, none);
}

// X icon 
@mixin iconCancel($position: relative, $width: 2px, $height: 21px, $color: #333, $display: inline-block) {
    position: $position;
    width: $width;
    height: $height;
    background-color: $color;
    @include prefix(transform, rotate(45deg)); 
    &::before {
        content: '';
        display: $display;
        width: $width;
        height: $height;
        background-color: $color;
        @include prefix(transform, rotate(-90deg)); 
    }
}


// Media queries
// Break breakpoint (내림차순 설정)
$huge	: 1440px;
$large		: 1024px; // Desktop Device
$medium		: 768px; // Tablet &amp; Desktop Device 
$small_l		: 640px; // Mobile Device 
$small_m		: 480px;
$small_s		: 375px;

@mixin query($breakpoint) {
  @if $breakpoint == huge {
    @media screen and (min-width: $huge) {
      @content;
    }
  } @else if $breakpoint == large {
      @media screen and (min-width: $large) and (max-width: $huge - 1) {
        @content;
     }
  } @else if $breakpoint == medium {
      @media screen and (min-width: $medium) and (max-width: $large - 1) {
        @content;
      }
  } @else if $breakpoint == small {
      @media screen and (min-width: $small_l) and (max-width: $medium - 1) {
        @content;
      }
  } @else if $breakpoint == small_l {
      @media screen and (min-width: $small_m) and (max-width: $small_l - 1) {
        @content;
      }
  } @else if $breakpoint == small_m {
      @media screen and (min-width: $small_s) and (max-width: $small_m - 1) {
        @content;
      }
  } @else {
      @media screen and (max-width: $small_s - 1) {
        @content;
      }
  }
}